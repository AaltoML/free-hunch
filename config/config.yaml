schema:
  net: str
  gnet: str
  outdir: str
  subdirs: bool
  seeds: List[int]
  class_idx: int
  max_batch_size: int
  device: str
  num_steps: int
  sigma_min: float
  sigma_max: float
  rho: float
  guidance: float
  S_churn: float
  S_min: float
  S_max: float
  S_noise: float
  solver: str
  discretization: str
  schedule: str
  scaling: str
  architecture: str
  openai_state_dict_path: str
  openai_setup_path: str
  iddpm_preconditioning: str
  conditional: bool
  total_images: int
  dataset_name: str
  dataset_path: str
  ref_stats_name: str
  operator_name: str
  kernel_size: int
  intensity: float
  noise_name: str
  noise_sigma: float
  cond_scaling: float
  save_videos: bool
  conditioning_mechanism: str
  clip_x0_mean: bool
  pigdm_posthoc_scaling: bool
  max_vector_count: int
  image_base_covariance: str
  pca_component_count: int
  denoiser_mean_error_threshold: float
  use_analytical_score_time_update: bool
  project_to_diagonal: bool
  space_step_update_threshold: float
  space_step_update_lower_threshold: float
  scale_factor: int
  do_space_updates: bool
  num_other_images_to_save: int
  max_rtol: float
  use_analytic_var_at_end: bool
  inpainting_type: str
  inpainting_prob_lower: float
  inpainting_prob_upper: float
  solver_type: str
  use_rtol_func: bool
  diffpir_lambda: float
  use_ddnm_kernel_params: bool

config:
  net: null
  gnet: null
  subdirs: false
  seeds: [0]
  class_idx: null
  total_images: 10
  max_batch_size: 2
  device: cuda
  num_steps: 50
  sigma_min: 0.002
  sigma_max: 80
  rho: 7
  guidance: null
  S_churn: 0
  S_min: 0
  S_max: inf
  S_noise: 1
  solver: heun
  discretization: edm
  schedule: linear
  scaling: none
  architecture: openai
  openai_state_dict_path: models/256x256_diffusion_uncond.pt
  openai_setup_path: models/256x256_diffusion_uncond_setup.txt
  iddpm_preconditioning: linear
  conditional: true
  dataset_name: training.dataset.ImageFolderDataset
  dataset: imagenet # imagenet, ffhq
  data_subset: val # train, val
  dataset_path: data/imagenet/
  ref_stats_name: fid_ref.pkl
  operator_name: gaussian_blur # motion_blur, gaussian_blur, inpainting
  kernel_size: 61
  intensity: 1.0
  noise_name: gaussian
  noise_sigma: 0.1
  cond_scaling: 1.0
  save_videos: false
  conditioning_mechanism: dps
  clip_x0_mean: false
  pigdm_posthoc_scaling: false
  max_vector_count: 100000
  image_base_covariance: identity
  pca_component_count: 10
  denoiser_mean_error_threshold: 0.2
  use_analytical_score_time_update: true
  project_to_diagonal: false
  space_step_update_threshold: 10.0
  space_step_update_lower_threshold: 1.0
  scale_factor: 4 # scale factor for the super-resolution problem
  num_other_images_to_save: 200
  max_rtol: 1
  do_space_updates: true
  use_analytic_var_at_end: false
  inpainting_type: random
  inpainting_prob_lower: 0.1
  inpainting_prob_upper: 0.3
  solver_type: customcuda
  use_rtol_func: false
  diffpir_lambda: 10
  use_ddnm_kernel_params: false # for DDNM+ Gaussian blur to showcase that it works with smaller kernels

# hydra:
#   run:
#     dir: out/${now:%Y-%m-%d}/${now:%H-%M-%S}_${hydra.job.name}
#   sweep:
#     dir: out/${now:%Y-%m-%d}/${now:%H-%M-%S}_${hydra.job.name}
#   job:
#     config:
#       override_dirname:
#         kv_sep: '='
#         item_sep: ','
#         exclude_keys: [seeds]
#     name: ${dataset}_${S_churn}_${dps_zeta}
# defaults:
#   - submitit
#   - override hydra/launcher: submitit_slurm